# CodeGraph Development Rules for Cursor AI

## Project Context
You are working on CodeGraph/USA, a graph-native semantic code intelligence system that reduces LLM token usage by 70% through precise context composition.

## Architecture Overview
- **codegraph-api**: TypeScript GraphQL/REST server (port 4000)
- **codegraph-analysis**: Python ML service with embeddings (port 8000)
- **codegraph-core**: C++ high-performance engine (Tree-sitter, BLAKE3)
- **codegraph-proto**: Shared Protocol Buffer definitions
- **codegraph-deploy**: Docker infrastructure

## Development Commands You Can Run
When asked to start services:
```bash
cd codegraph-deploy && docker-compose up -d && cd ..
cd codegraph-api && npm run dev &
cd codegraph-analysis && poetry run uvicorn codegraph_analysis.main:app --reload &
```

When asked to test:
```bash
cd codegraph-api && npm test
cd codegraph-analysis && poetry run pytest
```

When asked to check the system:
```bash
curl http://localhost:4000/health
curl http://localhost:8000/health
```

## Code Standards
### TypeScript (codegraph-api)
- Use strict TypeScript with explicit types
- Async/await for all async operations
- GraphQL resolvers should be typed
- Use dependency injection pattern

### Python (codegraph-analysis)
- Type hints required for all functions
- Use async functions for I/O operations
- Follow PEP 8 strictly
- Document with docstrings

### General Rules
- NEVER commit .env files
- ALWAYS check for existing implementations before creating new ones
- Use semantic commit messages: feat:, fix:, docs:, test:
- Add tests for any new functionality

## File Locations
- GraphQL schemas: codegraph-api/src/graphql/
- Python services: codegraph-analysis/src/codegraph_analysis/services/
- Proto definitions: codegraph-proto/proto/
- Docker configs: codegraph-deploy/

## Database Access
- Memgraph: Use Cypher queries through the service layer
- Qdrant: Use the embedding service for vector operations
- Never access databases directly from resolvers

## Common Tasks
When implementing a new feature:
1. Check if proto definitions need updating
2. Implement service layer first
3. Add GraphQL resolver
4. Write tests
5. Update documentation

## Security
- Validate all inputs
- Use parameterized queries
- Check authorization in resolvers
- Log security events

## Error Handling
- Return proper GraphQL errors
- Log errors with context
- Never expose internal details to clients
